1. What is a variable? Why might a programmer use a variable?A variable is a named reference to a value, and the uses include in expressions and to store values.2. If the value of first_name is "Abraham" and last_name is "Lincoln", explain the order in which Ruby will run the line full_name = first_name + last_name, and what the final result will be.The interpreter will first concatenate the last two variables and then store a reference to the resulting value in the variable named “full_name”3. For each of the following data types, write a short definition and give at least one example of when you might use the data type in a program. (Don't use an example we've already provided.)* String – an ordered list of characters of any length, example use: “abc”.length --> 3* Integer – a number without any decimal or fractional values, example use: 4 / 3 --> 1* Float – a number that has a decimal and a fractional value, example use  4.0 / 3.0 --> 1.3333333333333333* Nil – undefined value, example use: 4.0.nil? --> false * Boolean  - this stores true or false , example use: true & false --> false4. What is an algorithm?A set of steps to perform a procedure.5. What are two common categories of algorithm in computer science? Brute force and simple recursion. 6. What is a method? Why might a programmer choose to use a method?It is a set of expressions that returns a value. With methods, programmers can organize code into subroutines that are invoked from other areas of their program. 7. Define the following terms as they relate to a method. * return value – What is returned when a program reaches the reserved word end or explicitly stated as what is returned. * side effect – Effects of a method other than the return value, such as changing a global variable. * parameter – The list of values listed to the right of the method name (generally in parentheses) in the method definition, which are generally used within the method.* Argument – The list of values in parentheses to the right of the method name in the method invocation, which specify what will be passed to the method as parameters* implicit return – The result of the evaluation of the last line of a ruby method will be the return value unless there is a return statement with an explicit return value8. What are global scope and method scope? How do those scopes impact the availability of data at different points in a program?Global scope allows variables to be accessed and changed from any method, whereas variables defined within a method are only accessible within that method.  9. What is control flow? Why might a programmer choose to use flow control?Control flow directs what should happen depending on the evaluation of specified statements, for example, this is useful to allow a program to execute differently depending on the values of variables. 10. Define the following terms as they relate to flow control.* loop – this causes a set of statements to continue being executed until the condition that ends the loop is satisfied* if – this causes a portion of the program to run depending on the evaluation of the conditional of the if statement * else – this will cause a portion of the program to run if the conditional statement in the prior if statement evaluates to false* elsif – this will cause a portion of the program to run only if the conditional of the prior if statement evaluates to false and the conditional of the elsif statement evaluates to true* while – a portion of the program will continue to loop while the conditional of the while statement evaluates to true * until – a portion of the program will continue to loop until the conditional of the while statement evaluates to true